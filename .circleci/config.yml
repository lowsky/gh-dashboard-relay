# This config was automatically generated from your source code
# Stacks detected: deps:node:.
version: 2.1
orbs:
  node: circleci/node@7.2.0
jobs:
  deploy:
    # Install node dependencies and run tests
    executor: node/default
    resource_class: lowsky/selfhosted
    steps:
      - checkout:
          method: full
      - node/install-packages:
          check-cache: always
          pkg-manager: yarn-berry
          with-cache: false
      - run:
          name: Print node install help instructions
          command: |-
            echo "One cause for node package install failure is if you have private repositories that it can't reach
            One way to fix this for private npm packages:
              1. Use the npm CLI's \"login\" command to create a token (usually saved in your user's \"~/.npmrc\" file)
                For more info, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=set%20the%20%24npm_token%20environment%20variable%20in%20circleci
              2. Add a NPM_TOKEN to an org context
                For info on how to use contexts, see https://circleci.com/docs/contexts/
              3. Add a .circleci/config.yml to your repository or use this config.yml as a starting template
              4. Configure the jobs to use the context that includes NPM_TOKEN
              5. Add a step to inject your NPM_TOKEN environment variable into npm before \"install-packages\"
                For an example, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=the%20deploy%20job%20has%20several%20steps%20that%20run%20to%20authenticate%20with%20and%20publish%20to"
          when: on_fail
      - attach_workspace:
          at: ~/project
      - run:
          name: Run setup
          command: yarn circle:setup
      - run:
          name: Run vercel build
          command: yarn vercel build
      - run:
          name: Run ls
          command: ls -la ~/project
      - attach_workspace:
          at: ~/project
      - run:
          name: Run ls
          command: ls -la ~/project ~/project/.vercel
      - run:
          name: deploy
          command: yarn circle:deploy
workflows:
  build-and-test:
    jobs:
      - deploy:
          filters:
            branches:
              ignore: /main/
