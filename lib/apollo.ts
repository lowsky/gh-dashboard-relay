import { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';
import { Defer20220824Handler } from '@apollo/client/incremental';
import { setContext } from '@apollo/client/link/context';
import { relayStylePagination } from '@apollo/client/utilities';

import { fragmentRegistry } from './fragmentRegistry';

// generated by Fragment Matcher plugin, see codegen config
import generatedIntrospection from '../app/apollo/__gen__/possibleTypes';

// Create a function to get the Apollo Client instance
export function getApolloClient(authToken?: string): ApolloClient {
    // Create the HTTP link to the GitHub GraphQL API
    const httpLink = new HttpLink({
        uri: 'https://api.github.com/graphql',
    });

    // Add the authorization header to the HTTP link
    const authLink = setContext((_, { headers }) => {
        return {
            headers: {
                ...headers,
                authorization: authToken ? `Bearer ${authToken}` : '',
            },
        };
    });

    // Create the cache
    const cache = new InMemoryCache({
        possibleTypes: generatedIntrospection.possibleTypes,
        fragments: fragmentRegistry,
        typePolicies: {
            Query: {
                fields: {
                    repositoryOwner: {
                        keyArgs: ['login', 'id'],
                    },
                },
            },
            RepositoryOwner: {
                keyFields: ['login', 'id'],
                fields: {
                    // Configure type policies for pagination
                    // TODO more work and evaluation needed, see
                    // pagination: https://www.apollographql.com/docs/react/pagination/core-api

                    // Configure pagination for repositories
                    repositories: relayStylePagination(['ownerAffiliations']),
                },
            },
        },
    });

    // Create and return the Apollo Client instance
    return new ApolloClient({
        dataMasking: true,
        link: authLink.concat(httpLink),
        cache,
        defaultOptions: {
            query: {
                fetchPolicy: 'network-only',
            },
            watchQuery: {
                fetchPolicy: 'cache-and-network',
            },
        },

        /*
        Inserted by Apollo Client 3->4 migration codemod.
        If you are not using the `@defer` directive in your application,
        you can safely remove this option.
        */
        incrementalHandler: new Defer20220824Handler(),
    });
}
